name: Deploy Model to Raspberry Pi

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: self-hosted  # (맥 러너여도 OK)

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USER }}/fraud-model:latest,${{ secrets.DOCKERHUB_USER }}/fraud-model:${{ github.sha }}

      - name: SSH to Raspberry Pi & deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script_stop: true
          script: |
            set -e
            COMPOSE_DIR="/home/1117mg/actions-runner/_work/backend/backend"
            cd "$COMPOSE_DIR"

            PW="${{ secrets.SSH_PASSWORD }}"
            git fetch origin main || true
            git reset --hard origin/main || true

            [ -f .env ] || [ -f .env.prod ] || { echo "ERR: no .env or .env.prod"; exit 1; }
            [ -f .env ]      || cp .env.prod .env
            [ -f .env.prod ] || cp .env .env.prod

            # docker login + 최신 모델 이미지 pull
            echo "$PW" | sudo -S bash -c "echo '${{ secrets.DOCKERHUB_TOKEN }}' | docker login -u '${{ secrets.DOCKERHUB_USER }}' --password-stdin"
            echo "$PW" | sudo -S docker pull ${{ secrets.DOCKERHUB_USER }}/fraud-model:latest

            # .env 강제 지정
            echo "$PW" | sudo -S env DOCKERHUB_USER='${{ secrets.DOCKERHUB_USER }}' ENV_FILE=.env \
              docker compose --env-file .env \
                -f docker-compose.yml -f docker-compose.prod.yml \
                up -d --no-deps --force-recreate model nginx

            # 헬스체크
            for i in {1..12}; do
              if curl -fsSLk https://localhost/model/health | grep -q '"status":"ok"'; then
                echo "Model is healthy"
                exit 0
              fi
              echo "waiting... ($i/12)"; sleep 5
            done

            echo "$PW" | sudo -S docker ps
            MID=$(echo "$PW" | sudo -S docker ps -qf "name=model")
            [ -n "$MID" ] && echo "$PW" | sudo -S docker logs "$MID" --tail=200
            exit 1
