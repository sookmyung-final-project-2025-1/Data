name: Deploy Model to Raspberry Pi

on:
  push:
    branches: [ main ]

env:
  IMAGE: ${{ secrets.DOCKERHUB_USER }}/fraud-model
  VERSION: v1-${{ github.run_number }}-${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: self-hosted

    concurrency:
      group: deploy-main
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Download model artifacts
        run: |
          mkdir -p models/v1
          curl -fsSL -o models/v1/preprocessor.pkl "${{ secrets.MODEL_PRE_URL }}"
          curl -fsSL -o models/v1/model.pkl        "${{ secrets.MODEL_BIN_URL }}"
          curl -fsSL -o models/v1/metadata.json    "${{ secrets.MODEL_META_URL }}"
          ls -lh models/v1

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: |
            ${{ env.IMAGE }}:${{ env.VERSION }}
            ${{ env.IMAGE }}:latest

      - name: SSH to Raspberry Pi & deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script_stop: true
          script: |
            set -e
            COMPOSE_DIR="/home/1117mg/actions-runner/_work/backend/backend"
            cd "$COMPOSE_DIR"

            PW="${{ secrets.SSH_PASSWORD }}"
            git fetch origin main || true
            git reset --hard origin/main || true

            [ -f .env ] || [ -f .env.prod ] || { echo "ERR: no .env or .env.prod"; exit 1; }
            [ -f .env ]      || cp .env.prod .env
            [ -f .env.prod ] || cp .env .env.prod

            echo "$PW" | sudo -S bash -c "echo '${{ secrets.DOCKERHUB_TOKEN }}' | docker login -u '${{ secrets.DOCKERHUB_USER }}' --password-stdin"

            echo "$PW" | sudo -S docker pull "${{ env.IMAGE }}:${{ env.VERSION }}"

            # 새 태그를 .env/.env.prod에 확정 반영
            if [ -f .env ]; then
              sudo sed -i "s|^MODEL_IMAGE=.*|MODEL_IMAGE=${{ env.IMAGE }}:${{ env.VERSION }}|" .env
            fi
            if [ -f .env.prod ]; then
              sudo sed -i "s|^MODEL_IMAGE=.*|MODEL_IMAGE=${{ env.IMAGE }}:${{ env.VERSION }}|" .env.prod
            fi

            echo "$PW" | sudo -SE \
              DOCKERHUB_USER='${{ secrets.DOCKERHUB_USER }}' \
              MODEL_IMAGE='${{ env.IMAGE }}:${{ env.VERSION }}' \
              ENV_FILE=.env \
              docker compose --env-file .env \
                -f docker-compose.yml -f docker-compose.prod.yml \
                up -d --no-deps --force-recreate model nginx

            for i in {1..12}; do
              if curl -fsSLk https://localhost/health 2>/dev/null | grep -q '"status":"ok"'; then
                echo "Model is healthy"
                exit 0
              fi
              echo "waiting... ($i/12)"; sleep 5
            done

            echo "$PW" | sudo -S docker ps
            MID=$(echo "$PW" | sudo -S docker ps -qf "name=model")
            [ -n "$MID" ] && echo "$PW" | sudo -S docker logs "$MID" --tail=200
            exit 1