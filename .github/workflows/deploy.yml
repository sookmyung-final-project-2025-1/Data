name: Deploy Model

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.2.3)'
        required: true

env:
  TAG: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref_name }}
  IMAGE: ${{ secrets.DOCKERHUB_USER }}/fraud-model
  COMPOSE_DIR: /home/1117mg/actions-runner/_work/backend/backend

jobs:
  build-and-deploy:
    runs-on: self-hosted

    concurrency:
      group: deploy-model
      cancel-in-progress: true

    steps:
      - uses: actions/checkout@v4

      - name: Download release assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          
          if [[ "$TAG" =~ ^v([0-9]+)\. ]]; then
            MODEL_VER="v${BASH_REMATCH[1]}"
          else
            MODEL_VER="v1"
          fi
          
          mkdir -p "models/${MODEL_VER}"
          gh release download "${TAG}" -D "models/${MODEL_VER}"
          echo "MODEL_VERSION=${MODEL_VER}" >> $GITHUB_ENV

      - name: Validate release assets
        run: |
          MODEL_VER_DIR="models/${MODEL_VERSION}"
          
          # 필수 파일 검증
          required_files=("preprocessor.pkl" "metadata.json")
          for file in "${required_files[@]}"; do
            if [ ! -f "${MODEL_VER_DIR}/${file}" ]; then
              echo "ERROR: Required file missing: ${file}"
              exit 1
            fi
          done
          
          # 최소 하나의 모델 파일 존재 확인
          if ! ls ${MODEL_VER_DIR}/model*.pkl 1> /dev/null 2>&1; then
            echo "ERROR: No model files found (model*.pkl)"
            exit 1
          fi
          
          echo "All required files validated"
          ls -lh "${MODEL_VER_DIR}"

      - uses: docker/setup-buildx-action@v3

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push model image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: |
            ${{ env.IMAGE }}:${{ env.TAG }}
            ${{ env.IMAGE }}:latest
          build-args: |
            MODEL_VERSION=${{ env.MODEL_VERSION }}
          provenance: false

      - name: Deploy on runner
        run: |
          set -euo pipefail
          
          if [ ! -d "${COMPOSE_DIR}" ]; then
            echo "ERROR: Compose directory not found: ${COMPOSE_DIR}"
            exit 1
          fi
          
          cd "${COMPOSE_DIR}"
          
          if [ -d ".git" ]; then
            git fetch origin main || true
            git reset --hard origin/main || true
          fi
          
          # .env 파일 준비
          if [ ! -f .env ] && [ -f .env.prod ]; then
            cp .env.prod .env
            echo "Copied .env.prod to .env"
          fi
          
          # 환경변수 업데이트
          if grep -q '^MODEL_IMAGE=' .env 2>/dev/null; then
            sed -i "s#^MODEL_IMAGE=.*#MODEL_IMAGE=${IMAGE}:${TAG}#g" .env
          else
            echo "MODEL_IMAGE=${IMAGE}:${TAG}" >> .env
          fi

          if grep -q '^MODEL_VERSION=' .env 2>/dev/null; then
            sed -i "s#^MODEL_VERSION=.*#MODEL_VERSION=${MODEL_VERSION}#g" .env
          else
            echo "MODEL_VERSION=${MODEL_VERSION}" >> .env
          fi
          
          echo "Updated: MODEL_IMAGE=${IMAGE}:${TAG}, MODEL_VERSION=${MODEL_VERSION}"
          
          sudo docker pull "${IMAGE}:${TAG}"
          sudo docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d --no-deps --force-recreate model nginx
          
          # 헬스체크
          echo "Performing health check..."
          for i in {1..18}; do
            if curl -fsSLk https://localhost/model/health | grep -q '"status":"ok"'; then
              echo "Model deployment successful: ${TAG}"
              docker ps | grep model || true
              exit 0
            fi
            echo "Waiting for model to be ready... ($i/18)"
            sleep 5
          done
          
          # 배포 실패 시 진단
          echo "Model deployment failed - collecting diagnostics:"
          sudo docker compose -f docker-compose.yml -f docker-compose.prod.yml ps model || true
          sudo docker compose -f docker-compose.yml -f docker-compose.prod.yml logs --tail=50 model || true
          exit 1